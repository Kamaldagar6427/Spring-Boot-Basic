package com.spring.files.csv.controller;

import org.springframework.web.multipart.MultipartFile;

import com.opencsv.bean.CsvToBean;
import com.opencsv.bean.CsvToBeanBuilder;
import com.opencsv.exceptions.CsvException;
import com.spring.files.csv.helper.CSVHelper;
import com.spring.files.csv.message.ResponseMessage;
import com.spring.files.csv.model.Tutorial;
import com.spring.files.csv.service.CSVService;

import org.springframework.web.bind.annotation.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.convert.EntityReader;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpStatus;

import java.io.IOException;
import java.io.InputStreamReader;
import java.util.List;

@CrossOrigin("http://localhost:8081")
@RestController
@RequestMapping("/api/csv")
public class CSVController {

  @Autowired
  private CSVService fileService;

  @PostMapping("/upload")
//  public ResponseEntity<ResponseMessage> uploadFile(@RequestParam("file") MultipartFile file) {
//    if (file.isEmpty()) {
//      return ResponseEntity.badRequest().body(new ResponseMessage("Please upload a file!"));
//    }
//
//    if (!CSVHelper.hasCSVFormat(file)) {
//      return ResponseEntity.badRequest().body(new ResponseMessage("Please upload a CSV file!"));
//    }
//
//    try {
//      fileService.save(file);
//      return ResponseEntity.ok().body(new ResponseMessage("Uploaded the file successfully: " + file.getOriginalFilename()));
//    } catch (Exception e) {
//      return ResponseEntity.status(HttpStatus.EXPECTATION_FAILED).body(new ResponseMessage("Could not upload the file: " + file.getOriginalFilename() + "!"));
//    }
//  }
  
  public List<Tutorial> uploadCsvData(@RequestParam("file") MultipartFile file) throws IOException, CsvException {
		try (Reader reader = new BufferedReader(new InputStreamReader(file.getInputStream()))) {

			// create csv bean reader
			CsvToBean<Tutorial> csvToBean = new CsvToBeanBuilder<Tutorial>(reader).withType(Tutorial.class)
					.withIgnoreLeadingWhiteSpace(true).build();

			// convert `CsvToBean` object to list of users
			List<Tutorial> users = csvToBean.parse();

			System.out.println("done");

			return users;

		} catch (Exception ex) {
			ex.printStackTrace(); // Log the exception
		}
		return null;

	}

  @GetMapping("/tutorials")
  public ResponseEntity<List<Tutorial>> getAllTutorials() {
    try {
      List<Tutorial> tutorials = fileService.getAllTutorials();
      if (tutorials.isEmpty()) {
        return ResponseEntity.noContent().build();
      }
      return ResponseEntity.ok(tutorials);
    } catch (Exception e) {
      return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
    }
  }
}

